class Board {
  field Array data;
  field String playOn;
  field int fieldsLeft;
  field int cellWidth;

  constructor Board new() {
    let data = Array.new(9);
    let fieldsLeft = 9;
    let playOn = "Play on";
    let cellWidth = 50;

    return this;
  }

  method void reset() {
    let data = Array.new(9);
    let fieldsLeft = 9;
    return;
  }

  method void putSign(int position, String sign) {
    let data[position - 1] = sign;
    let fieldsLeft = fieldsLeft - 1;
    return;
  }

  method String getPosition(int position) {
    return data[position - 1];
  }

  method int getFieldsLeft() {
    return fieldsLeft;
  }

  method boolean fieldAvailable(int position) {
    if (data[position - 1] = null) {
      return true;
    } else {
      return false;
    }
  }

  method String evaluate() {
    if ((data[0] = data[1]) & (data[1] = data[2])) { return data[0]; }
    if ((data[3] = data[4]) & (data[4] = data[5])) { return data[3]; }
    if ((data[6] = data[7]) & (data[7] = data[8])) { return data[6]; }
    if ((data[0] = data[3]) & (data[3] = data[6])) { return data[0]; }
    if ((data[1] = data[4]) & (data[4] = data[7])) { return data[1]; }
    if ((data[2] = data[5]) & (data[5] = data[8])) { return data[2]; }
    if ((data[0] = data[4]) & (data[4] = data[8])) { return data[0]; }
    if ((data[6] = data[4]) & (data[4] = data[2])) { return data[6]; }

    return playOn;
  }

  method void draw() {
    var int i;
    var String sign;

    do drawGrid();

    let i = 0;
    while (i < 9) {
      let sign = data[i];

      if (sign = TicTacToe.getSignX()) {
        do drawX(i);
      }
      if (sign = TicTacToe.getSignO()) {
        do drawO(i);
      }

      let i = i + 1;
    }

    return;
  }

  method void drawGrid() {
    do Screen.drawLine(100, 100, 250, 100);
    do Screen.drawLine(100, 150, 250, 150);

    do Screen.drawLine(150, 50, 150, 200);
    do Screen.drawLine(200, 50, 200, 200);

    return;
  }

  method void drawX(int position) {
    var int offsetX;
    var int offsetY;
    var int initX;
    var int initY;
    var int xWidth;

    let xWidth = 40;
    let initX = 105;
    let initY = 55;
    let offsetX = Utils.modulo(position, 3) * cellWidth;
    let offsetY = (position/3) * cellWidth;

    do Screen.drawLine(initX + offsetX, initY + offsetY, initX + xWidth + offsetX, initY + xWidth + offsetY);
    do Screen.drawLine(initX + offsetX + xWidth, initY + offsetY, initX + offsetX, initY + offsetY + xWidth);

    return;
  }

  method void drawO(int position) {
    var int offsetX;
    var int offsetY;
    var int initX;
    var int initY;
    var int radius;

    let initX = 125;
    let initY = 75;
    let radius = 20;
    let offsetX = Utils.modulo(position, 3) * cellWidth;
    let offsetY = (position/3) * cellWidth;

    do Screen.drawCircle(initX + offsetX, initY + offsetY, radius);

    return;
  }

  method void dispose() {
    do Memory.deAlloc(this);
    return;
  }
}